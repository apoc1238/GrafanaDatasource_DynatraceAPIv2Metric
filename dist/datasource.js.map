{"version":3,"sources":["../src/datasource.js"],"names":["FieldType","MutableDataFrame","getBackendSrv","isFetchError","DataSource","instanceSettings","baseUrl","url","options","promises","targets","map","queryText","refId","response","request","range","from","toISOString","to","metricData","data","result","frames","metric","timestamps","values","fields","name","type","time","number","Promise","all","then","flat","params","fetch","headers","Authorization","toPromise","defaultErrorMessage","status","message","statusText","err","error","code"],"mappings":"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","file":"datasource.js","sourcesContent":["import { FieldType, MutableDataFrame } from '@grafana/data';\nimport { getBackendSrv, isFetchError } from '@grafana/runtime';\n\nexport default class DataSource {\n  constructor(instanceSettings) {\n    this.baseUrl = instanceSettings.url;\n  }\n\n  async query(options) {\n    const promises = options.targets.map(async ({ queryText, refId }) => {\n      const response = await this.request(`/api/v2/metrics/query?metricSelector=${queryText}&from=${options.range.from.toISOString()}&to=${options.range.to.toISOString()}`);\n      const metricData = response.data.result[0].data;\n\n      const frames = metricData.map((metric) => {\n        const { timestamps, values } = metric;\n\n        return new MutableDataFrame({\n          refId,\n          fields: [\n            { name: 'Time', type: FieldType.time, values: timestamps },\n            { name: 'Value', type: FieldType.number, values },\n          ],\n        });\n      });\n\n      return frames;\n    });\n\n    return Promise.all(promises).then(data => ({ data: data.flat() }));\n  }\n\n\n  async request(url, params) {\n    const response = getBackendSrv().fetch({\n      url: `${this.baseUrl}${url}${params ? `&${params}` : ''}`,\n      headers: {\n        Authorization: 'Api-Token dt0c01.DP2DQOZAENIKVBQOGJJ6KFP4.S4CO4JFE55NHQ7NEDRC5ASWNQ4PKST4D6NUBB7BVFYUVRUKJKZPS5BNDHEETW6RA',\n      },\n    });\n    return response.toPromise();\n  }\n\n  async testDatasource() {\n    const defaultErrorMessage = 'Cannot connect to API';\n\n    try {\n      const response = await this.request('/api/v2/metrics');\n      if (response.status === 200) {\n        return {\n          status: 'success',\n          message: 'Success',\n        };\n      }\n      return {\n        status: 'error',\n        message: response.statusText || defaultErrorMessage,\n      };\n    } catch (err) {\n      let message = '';\n      if (typeof err === 'string') {\n        message = err;\n      } else if (isFetchError(err)) {\n        message = `Fetch error: ${err.statusText || defaultErrorMessage}`;\n        if (err.data && err.data.error && err.data.error.code) {\n          message += `: ${err.data.error.code}. ${err.data.error.message}`;\n        }\n      }\n      return {\n        status: 'error',\n        message,\n      };\n    }\n  }\n}\n"]}